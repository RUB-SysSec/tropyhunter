ARITHMETIC_X86 = [
    # standard x86
    'add',
    'sub',
    'mul',
    'imul',
    'div',
    'idiv',
    'neg',
    'adc',
    'sbb',
    'inc',
    'dec',
    'lea',

    # SSE
    'addss',
    'subss',
    'mulss',
    'divss',
    'rcpss',
    'sqrtss',
    'maxss',
    'minss',
    'rsqrtss',
    'addps',
    'subps',
    'mulps',
    'divps',
    'rcpps',
    'sqrtps',
    'maxps',
    'minps',
    'rsqrtps',
    'pmulhuw',
    'psadbw',
    'pavgb',
    'pavgw',
    'pmaxub',
    'pminub',
    'pmaxsw',
    'pminsw',

    # SSE2
    'addpd',
    'addsd',
    'divpd',
    'divsd',
    'maxpd',
    'maxsd',
    'minpd',
    'minsd',
    'mulpd',
    'mulsd',
    'sqrtpd',
    'sqrtsd',
    'subpd',
    'subsd',
    'paddb',
    'paddw',
    'paddd',
    'paddq',
    'paddsb',
    'paddsw',
    'paddusb',
    'paddusw',
    'pmullw',
    'pmulhw',
    'pmulhuw',
    'pmuludq',
    'psubb',
    'psubw',
    'psubd',
    'psubq',
    'psubsb',
    'psubsw',
    'pmaddwd',
    'psubusb',
    'psubusw',
    'pavgb',
    'pavgw',
    'pminub',
    'pminsw',
    'pmaxsw',
    'pmaxub',
    'psadbw',

    # SSE3
    'addsubps',
    'addsubpd',
    'haddps',
    'haddpd',
    'hsubps',
    'hsubpd',
    
    # SSSE3
    'psignb',
    'psignw',
    'psignd',
    'pshufb',
    'pmulhrsw',
    'pmaddubsw',
    'phsubw',
    'phsubsw',
    'phsubd',
    'phaddsw',
    'phaddw',
    'phaddd',
    'pabsb',
    'pabsw',
    'pabsd',
    
    # SSE4
    'dpps',
    'dppd',
    'roundps',
    'roundss',
    'roundpd',
    'roundsd',
    'mpsadbw',
    'phminposuw',
    'pmulld',
    'pmuldq',
    'pminsb',
    'pminuw',
    'pminsd',
    'pminud',
    'pmaxsb',
    'pmaxuw',
    'pmaxsd',
    'pmaxud',

    # AVX

    # AVX-512
    'vrcp14pd',
    'vrcp14ps',
    'vrcp14sd',
    'vrcp14ss',
    'vrndscaleps',
    'vrndscalepd',
    'vrndscaless',
    'vrndscalesd',
    'vrsqrt14pd',
    'vrsqrt14ps',
    'vrsqrt14sd',
    'vrsqrt14ss',
    'vscalefps',
    'vscalefpd',
    'vscalefss',
    'vscalefsd',
    'vpmaxsq',
    'vpmaxuq',
    'vpminsq',
    'vpminuq',
    'vexp2pd',
    'vexp2ps',
    'vrcp28pd',
    'vrcp28ps',
    'vrcp28sd',
    'vrcp28ss',
    'vrsqrt28pd',
    'vrsqrt28ps',
    'vrsqrt28sd',
    'vrsqrt28ss',
    'v4fmaddps',
    'v4fmaddss',
    'v4fnmaddps',
    'v4fnmaddss',
    'vp4dpwssd',
    'vp4dpwssds',
    'vpmullq',

    # AVX-512_VNNI
    'vpdpbusd',
    'vpdpbusds',
    'vpdpwssd',
    'vpdpwssds',

    # AVX-512_IFMA
    'vpmadd52luq',
    'vpmadd52huq',

    # AVX-512 GFNI
    'gf2p8affineinvqb',
    'gf2p8affineqb',
    'gf2p8mulb',

    # AVX-512 VPCLMULQDQ
    'vpclmulqdq',
]

BITWISE_X86 = [
    # standard x86
    'shr',
    'shl',
    'sar',
    'sal',
    'shld',
    'shrd',
    'ror',
    'rol',
    'rcr',
    'rcl',
    'and',
    'or',
    'xor',
    'not',

    # SSE
    'andps',
    'orps',
    'xorps',
    'andnps',
    'shufps',

    # SSE2
    'andpd',
    'orpd',
    'xorpd',
    'andnpd',
    'pand',
    'pandn',
    'por',
    'pxor',
    'psllw',
    'psllw',
    'pslld',
    'pslld',
    'psllq',
    'psllq',
    'psrad',
    'psrad',
    'psraw',
    'psraw',
    'psrlw',
    'psrlw',
    'psrld',
    'psrld',
    'psrlq',
    'psrlq',
    'pslldq',
    'psrldq',
    'shufpd',
    'pshufhw',
    'pshuflw',

    # SSE4
    'blendps',
    'blendvps',
    'blendpd',
    'blendvpd',
    'pblendvb',
    'pblendw',

    # AVX-512
    'kand',
    'kandn',
    'knot',
    'kor',
    'kshiftl',
    'kshiftr',
    'kxnor',
    'kxor',
    'vblendmpd',
    'vblendmps',
    'vpblendmd',
    'vpblendmq',
    'vpblendmb',
    'vpblendmw',
    'vpermb',
    'vpermw',
    'vpermt2b',
    'vpermt2w',
    'vpermi2pd',
    'vpermi2ps',
    'vpermi2b',
    'vpermi2w',
    'vpermi2d',
    'vpermi2q',
    'vpermt2ps',
    'vpermt2pd',
    'vpermt2d',
    'vpermt2q',
    'vshuff32x4',
    'vshuff32x2',
    'vshuff64x4',
    'vshuff64x2',
    'vpmultishiftqb',
    'vpternlogd',
    'vpternlogq',
    'vprold',
    'vprolvd',
    'vprolq',
    'vprolvq',
    'vprord',
    'vprorvd',
    'vprorq',
    'vprorvq',

    # AVX-512_VBMI2
    'vpshld',
    'vpshldv',
    'vpshrd',
    'vpshrdv',

    # AVX-512_BITALG
    'vpshufbitqmb',
]

RANDOMNESS_X86 = [
    'rdrand',
    'rdseed',
]

CRYPTO_X86 = [
    # AES-NI
    'aesenc',
    'aesenclast',
    'aesdec',
    'aesdeclast',
    'aeskeygenassist',
    'aesimc',
    'aesmulqdq',

    # SHA
    'sha1rnds4',
    'sha1nexte',
    'sha1msg1',
    'sha1msg2',
    'sha256rnds2',
    'sha256msg1',
    'sha256msg2',

    # AVX-512 VAES
    'vaesdec',
    'vaesdeclast',
    'vaesenc',
    'vaesenclast',
]

CALL_X86 = [
    'call',
]

JUMP_UNCONDITIONAL_X86 = [
    'jmp',
]

JUMP_CONDITIONAL_X86 = [
    'je',
    'jne',
    'jg',
    'jge',
    'ja',
    'jae',
    'jl',
    'jle',
    'jb',
    'jbe',
    'jo',
    'jno',
    'jz',
    'jnz',
    'js',
    'jns',
]

JUMP_X86 = JUMP_UNCONDITIONAL_X86 + JUMP_CONDITIONAL_X86
